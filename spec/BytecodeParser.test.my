
import 'fixtures/MycoGrammar.my'

BasicSpec {
  name: "BytecodeParser"
  
  new_parser: BytecodeParser { }
  
  [tests]
  
  it "can match from a tiny grammar": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root:
        str('abc') / str('x') + set('Yy') + !str('y') + !!range('a','z') + any
    }
    parser.subject = 'xyz'
    parser.execute
    assert_equal(parser.result, 3)
  }
  
  it "can match from a grammar with multiplicit patterns": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root: str('x').+ + str('y').* + str('z').-
    }
    parser.subject = 'xxz'
    parser.execute
    assert_equal(parser.result, 3)
  }
  
  it "can match from a grammar with rule calls": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root: unintended / intended
      rule unintended: abc
      rule intended: x + any_y + not_y + any_lower
      
      rule abc:   str('abc')
      rule x:     str('x')
      rule any_y: set('Yy')
      rule not_y: !str('y')
      rule lower: range('a','z')
      rule any_lower: !!lower + any
    }
    parser.subject = 'xyz'
    parser.execute
    assert_equal(parser.result, 3)
  }
  
  it "can match from the Myco grammar": {
    parser = new_parser
    parser.grammar = MycoGrammar
    parser.subject = '
    Object {
      foo:    one
      bar  :  Two  
      baz    :3
      deci  : 3.88
      ary :  [1,2, 3,
              4
              5,,
              6
              
              7,
             ]
      all:null
      none:void
      str  : "string"
      sym  :  :bol
      ssym : :"with spaces"
      s  :  self
      t:    true
      f:    false
      "x y" : z
    }'
    parser.execute
    assert(parser.result)
  }
}
