
# Implementation from central Myco repository
# TODO: import instead of copying this code

BasicSpec < Object {
  assert: |arg, message="expected "arg.inspect" to be truthy"|
    arg || raise(message)
  
  refute: |arg, message="expected "arg.inspect" to be falsey"|
    arg && raise(message)
  
  assert_equal: |a, b, message="expected "a.inspect" to equal "b.inspect""|
    a == b || raise(message)
  
  refute_equal: |a, b, message="expected "a.inspect" to not equal "b.inspect""|
    a == b && raise(message)
  
  assert_is_a: |a, b, message="expected "a.inspect" to be a "b.inspect""|
    a.is_a?(b) || raise(message)
  
  name: to_s
  
  on creation: {
    self.?tests && (
      STDOUT.print(""self.name" ")
      self.tests.memes.each |name, test| { test.result; STDOUT.print(".") }
      STDOUT.print("\n")
    )
  }
  
  [decorators]
  
  const it:      Decorator { }
  const specify: Decorator { }
}
