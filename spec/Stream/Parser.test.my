
BasicSpec {
  name: "Stream::Parser"
  
  new_parser: Stream::Parser.new
  
  [tests]
  
  it "can match from a minimal grammar": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root: si.+
    }
    state = parser.parse([:x, :y, :z])
    assert_equal(state.end_idx, 3)
  }
  
  it "can match from a minimal grammar with rules in the stream items": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root: si([:to_sym, [], :x]).+
    }
    state = parser.parse([:x, :x, :x])
    assert_equal(state.end_idx, 3)
  }
  
  it "can create a result from reductions": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root: r(si.+[:list]) { list.join('.') }[:root]
    }
    state = parser.parse([:x, :y, :z])
    assert_equal(state.result[:root], 'x.y.z')
  }
  
  it "captures individual items for single-item captures": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root: r(si[:a] + si[:b] + si.+[:rest]) { [a, b, rest] }[:root]
    }
    state = parser.parse([:x, :y, :z])
    assert_equal(state.result[:root], [:x, :y, [:z]])
  }
  
  it "can find the first occurrence": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root: si([:to_sym, [], :y]).+
    }
    state = parser.find([:x, :x, :y, :y, :z, :z, :y, :y, :x, :x])
    assert_equal(state.start_idx, 2)
    assert_equal(state.end_idx, 4)
  }
  
  it "can find the next occurrence": {
    parser = new_parser
    parser.grammar = Grammar {
      [rules]
      rule root: si([:to_sym, [], :y]).+
    }
    state = parser.find([:x, :x, :y, :y, :z, :z, :y, :y, :x, :x], start_idx: 4)
    assert_equal(state.start_idx, 6)
    assert_equal(state.end_idx, 8)
  }
}
