
Constructions < EmptyObject {
  
  ##
  # Basic types of constructions.
  
  Base < BasicObject { }
  
  Character < Base {
    var code
    sequence: [[:char, code]]
  }
  CharacterString < Base {
    var codes
    sequence: codes.map |code| { [:char, code] }
  }
  
  NegativePredicate < Base {
    var inner
    sequence: {
      a = inner.sequence
      [[:choice, a.count+2], *a, [:fail_twice]]
    }
  }
  PositivePredicate < Base {
    var inner
    sequence: {
      a = inner.sequence
      count = a.count
      [[:choice, count+4], [:choice, count+1], *a, [:commit, 1], [:fail]]
    }
  }
  OrderedChoice < Base {
    var first, var second
    sequence: {
      a = first.sequence
      b = second.sequence
      [[:choice, a.count+2], *a, [:commit, b.count+1], *b]
    }
  }
  Concatenation < Base {
    var first, var second
    sequence: [*first.sequence, *second.sequence]
  }
  
  
  ##
  # Bindings of patterns to constructions.
  
  Patterns::Character         << { construct:Character.new(code:code) }
  Patterns::CharacterString   << { construct:CharacterString.new(codes:codes) }
  
  Patterns::PositivePredicate << {
    construct:PositivePredicate.new(inner:pattern.construct)
  }
  Patterns::OrderedChoice   << {
    construct:OrderedChoice.new(first:first.construct, second:second.construct)
  }
  Patterns::Concatenation   << {
    construct:Concatenation.new(first:first.construct, second:second.construct)
  }
}
