
Machine < BasicObject, Instructions {
  # The index of the next program instruction, or null indicating fail condition
  var ip: 0
  
  # The key name in the rule table of the next program instruction
  var ipk: :root
  
  # The current index into the subject string
  var idx: 0
  
  # A list of stack entries, each of which is either a:
  #   return_address (the instruction index to return to)
  # or a list containing:
  #   [fail_address, current_idx, current_capture_list] (a pending alternative)
  var stack: []
  
  # A list of tuples, each containing:
  #   [idx, captor] (the index into the subject and the captor to notify)
  var captures: []
  
  # The subject string as an array of character codes
  var subject: []
  
  # The sequence of instructions to execute for each rule name
  var sequence_table: ::Ruby::Hash.new
  
  
  # Execute the root rule instruction sequence over the given subject
  execute: loop {
    ip |? handle_fail ?? (
      (ip==true) &? break ?? send(*sequence_table.fetch(ipk)[ip])
    )
  }
  
  had_failure: !ip
}
