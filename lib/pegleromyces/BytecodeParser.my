
BytecodeParser < BasicObject {
  State < BasicObject {
    var end_idx
    var result
    
    var error_idx
    var error_row
    var error_col
    var error_string
    raise_error: raise(SyntaxError, error_string)
  }
  
  var grammar: Grammar.new
  
  new_worker: set_up_worker(prototype.new)
  
  var prototype: compile_prototype
  
  refresh: self.prototype = compile_prototype
  
  compile_prototype: {
    proto = Component.new
    grammar.construct_all_rules
    grammar.rule_table.each |name, rule| {
      compile_rule_into(proto, name, rule)
    }
    proto
  }
  
  compile_rule_into: |proto, name, rule| {
    construct = rule.construct_rule
    
    Myco.add_dynamic_method(proto, name, "(compiled parser)") |g| {
      instructor = BytecodeInstructions.new
      instructor.g = g
      g.extend(BytecodeHelpers)
      
      g.rule_start
      construct.bytecode(instructor)
      g.rule_finish
    }
  }
  
  compile_generator: |name, file, line=1, &block| {
    g = Myco::ToolSet::Generator.new
    g.name = name
    g.file = file
    g.set_line(line)
    
    block.call(g)
    
    g.ret
    g.close
    g.use_detected
    g
  }
  
  compile_code: |name, file, line=1, &block| {
    g = compile_generator(name, file, line, &block)
    g.encode
    g.package(Rubinius::CompiledCode)
  }
  
  save_prototype: |filename| {
    code = compile_code(:__script__, :"(snippet)") |g| {
      g.push_cpath_top; g.find_const(:Class)
      g.create_block(compile_generator(:__block__, :"(snippet)") |g| {
        prototype.instance_methods.each |name| {
          code = prototype.instance_method(name).executable
          if(code.is_a?(Rubinius::CompiledCode)) {
            g.push_rubinius
              g.push_literal(name)
              g.push_literal(code)
              g.push_scope
              g.push_variables; g.send(:method_visibility, 0)
            g.send(:add_defn_method, 4)
          }
        }
      })
      g.send_with_block(:new, 0)
    }
    
    Myco::ToolSet::CompiledFile.dump(code, filename, Rubinius::Signature, Rubinius::RUBY_LIB_VERSION)
  }
  
  load_prototype: |filename| {
    loader = Myco::CodeLoader::BytecodeLoader.new(filename)
    loader.bind_to(call_depth:1)
    self.prototype = loader.load
  }
  
  set_up_worker: |worker| {
    worker.__set_ivar__(:"@captures", [])
    worker.__set_ivar__(:"@highest_idx", 0)
    worker
  }
  
  captures_of_worker: |worker|
    worker.__get_ivar__(:"@captures")
  
  highest_idx_of_worker: |worker|
    worker.__get_ivar__(:"@highest_idx")
  
  new_processor: Processor.new(builder: new_builder)
  new_builder: Builder.new
  
  
  # Match and process the given string using the current grammar
  parse: |string, rule:"root", start_idx:0| {
    string    = string.to_s
    rule      = rule.to_sym
    start_idx = start_idx.to_i
    
    worker    = new_worker
    processor = new_processor
    state     = State.new(
      error_idx:    null
      error_row:    null
      error_col:    null
      error_string: null
      result:       null
      end_idx:      worker.__send__(rule, string, start_idx),
    )
    
    state.end_idx &? (
      processor.string = string
      processor.capture_items = captures_of_worker(worker)
      state.result = processor.process
    ) ?? (
      state.error_idx = highest_idx_of_worker(worker)
      pos = processor.position_of(state.error_idx, string)
      state.error_row = pos.first
      state.error_col = pos.last
      state.error_string = \
      "Unexpected character near line: "state.error_row", column: "state.error_col".\n" \
        string.each_line.to_a[state.error_row - 1]"" \
        (' ' * [(state.error_col - 1), 0].max)"^"
    )
    state
  }
}
