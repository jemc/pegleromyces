
BytecodeMachine < BasicObject, BytecodeInstructions {
  var subject: ""
  var grammar: Grammar { }
  
  compile_worker: {
    worker = EmptyObject { }
    grammar.touch_root_rule
    grammar.rule_table.each |name, rule| {
      compile_rule_into(worker, name, rule)
    }
    worker
  }
  
  compile_rule_into: |worker, name, rule| {
    construct = rule.construct_rule
    
    worker.component.dynamic_method(name, "(compiled parser)") |g| {
      self.g = g
      start
      construct.bytecode(self)
      finish
    }
  }
  
  # Execute the root rule instruction sequence over the given subject
  execute: {
    worker = compile_worker
    # puts(worker.method(:root).executable.decode) # Print for debug
    self.result = worker.root(subject, 0)
  }
  
  var result
}
