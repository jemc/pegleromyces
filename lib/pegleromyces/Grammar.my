
Grammar < BasicObject, Patterns::ShorthandMethods {
  
  Rule < Patterns::UnaryBase {
    construct_rule: inner.construct
    construct: RuleReference.new(name:name)
  }
  
  RuleReference < Constructions::UnaryBase {
    var name
    sequence: [[:call, name]]
  }
  
  var rule_table: Hash.new
  
  # Force evaluation of the rule tree by calling the root rule node
  touch_root_rule: rules.root
  
  [decorators]
  var rule: Decorator {
    apply: |meme| {
      name = meme.name
      # TODO: use some kind of Decorator#wrap mechanism instead
      meme.target.declare_meme(name, [:memoize]) {
        outer_self = self
        rule = Rule {
          name: name
          inner: meme.result_for(outer_self)
        }
        rule_table[name] = rule
        rule
      }
    }
    [transforms]
    expose: false # Exposing the original meme would overwrite the wrapped one
  }
  
  [rules]
  rule root: Patterns::AnyCharacter.new.*
}
